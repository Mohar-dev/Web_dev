#include <bits/stdc++.h>
using namespace std;
/*
bool isOneFlip(string str)
{
    int sum = 0;
    int n = str.length();

    // Traverse through given string and
    // count the total sum of numbers
    for (int i = 0; i < n; i++)
        sum += str[i] - '0';
        cout<<sum<<endl;
    // Return true if any of the two counts
    // is 1
    return (sum == n - 1 || sum == 1);
}
*/

/*string checkdup(string str)
 {

     int charcheck[26] = {0};
     string newstr="";
     for(int i=0;str[i]!='\0';i++)
     {
        if(str[i] >='a' && str[i]<='z')
        {
         charcheck[str[i]-'a']++;
        }
        else if((str[i] == ')') || (str[i] == '(' )|| (str[i] == '@') || (str[i] == '\b' ))
        {
            charcheck[i]+=1;
        }

     }

     for(int i=0;str[i]!='\0';i++)
     {
       if(str[i] >='a' && str[i]<='z')
       {


         if(charcheck[str[i]-'a']==1)
         {

             newstr.push_back('(');
         }
         else if(charcheck[str[i]-'a'] >1)
         {

             newstr.push_back(')');
         }
       }

       else
       {

           if(charcheck[i]==1)
           {
               newstr.push_back('(');
           }
           else if(charcheck[i] >1)

            {
               newstr.push_back(')');
           }
       }

     }

     return newstr;
 }*/


   int solve(int N, int y, vector<int> A) {
        // code here
        int count1=0;int sum=0;int k=y;
        for(int i=0;i<N;i++)
         {
            //A[i]+=(k);

            while(k!=0)
             {
                 sum = A[i]+k;

                 // cout<<"debug : k: " << k <<endl;

                // cout<<"debug : A[i]: " <<   A[i] <<endl;

                // cout<<"debug : sum: " << sum <<endl;
                 if(sum == y)
                 {
                     count1++;
                 }

                 k--;
             }
             k=y;


         }

         return count1;
   }

// Main function
int main()
{
   /* string str = "))@";
    cout << checkdup(str);*/
    vector<int> A ={3,1,4,5};int y=2;int N=4;
    cout<<"So the count is:" << solve(N,y,A) << endl;
    return 0;
}
---------------------------------------------------------dijktra's algorithm---------------------------------


Dijkstra algorithm
#include<bits/stdc++.h>
using namespace std;

#define V 6		//No of vertices

int selectMinVertex(vector<int>& value,vector<bool>& processed)
{
	int minimum = INT_MAX;
	int vertex;
	for(int i=0;i<V;++i)
	{
		if(processed[i]==false && value[i]<minimum)
		{
			vertex = i;
			minimum = value[i];
		}
	}
	return vertex;
}

void dijkstra(int graph[V][V])
{
	int parent[V];		//Stores Shortest Path Structure
	vector<int> value(V,INT_MAX);	//Keeps shortest path values to each vertex from source
	vector<bool> processed(V,false);	//TRUE->Vertex is processed

	//Assuming start point as Node-0
	parent[0] = -1;	//Start node has no parent
	value[0] = 0;	//start node has value=0 to get picked 1st

	//Include (V-1) edges to cover all V-vertices
	for(int i=0;i<V-1;++i)
	{
		//Select best Vertex by applying greedy method
		int U = selectMinVertex(value,processed);
		processed[U] = true;	//Include new Vertex in shortest Path Graph

		//Relax adjacent vertices (not yet included in shortest path graph)
		for(int j=0;j<V;++j)
		{
			/* 3 conditions to relax:-
			      1.Edge is present from U to j.
			      2.Vertex j is not included in shortest path graph
			      3.Edge weight is smaller than current edge weight
			*/
			if(graph[U][j]!=0 && processed[j]==false && value[U]!=INT_MAX
			&& (value[U]+graph[U][j] < value[j]))
			{
				value[j] = value[U]+graph[U][j];
				parent[j] = U;
			}
		}
	}
	//Print Shortest Path Graph
	for(int i=1;i<V;++i)
		cout<<"U->V: "<<parent[i]<<"->"<<i<<"  wt = "<<graph[parent[i]][i]<<"\n";
}

int main()
{
	int graph[V][V] = { {0, 1, 4, 0, 0, 0},
						{1, 0, 4, 2, 7, 0},
						{4, 4, 0, 3, 5, 0},
						{0, 2, 3, 0, 4, 6},
						{0, 7, 5, 4, 0, 7},
						{0, 0, 0, 6, 7, 0} };

	dijkstra(graph);	
	return 0;
}

//TIME COMPLEXITY: O(V^2)
//TIME COMPLEXITY: (using Min-Heap + Adjacency_List): O(ElogV)

-------------------------------------------------------------------------------------------------------

int solve(int N, int y, vector<int> A) {
        // code here
        int count1=0;int sum=0;int k=y;
        for(int i=0;i<N;i++)
         {
            //A[i]+=(k);

            while(k!=0)
             {
                 sum = A[i]+k;

                 // cout<<"debug : k: " << k <<endl;

                // cout<<"debug : A[i]: " <<   A[i] <<endl;

                // cout<<"debug : sum: " << sum <<endl;
                 if(sum == y)
                 {
                     count1++;
                 }

                 k--;
             }
             k=y;


         }

         return count1;
   }

// Main function
int main()
{
   /* string str = "))@";
    cout << checkdup(str);*/
    vector<int> A ={3,1,4,5};int y=2;int N=4;
    cout<<"So the count is:" << solve(N,y,A) << endl;
    return 0;
}

-----------------------------------------------reverse of string--------------------------------------------------------------

  void solve(string str) {
        // code here
     int n = str.length();string rev="";
     for(int i=n-1;i>=0;i--)
     {

         rev+=str[i];
     }
     cout<<rev<<endl;
   }

// Main function
int main()
{
   string str = "a+b-c";
   solve(str);
    return 0;
}

----------------------------------------generate all rotations if a string--------------------------------------------------------


   void solve(string str) {
        // code here
     string rot;
     rot=str+str;
     int n =str.length();

     string temp[n];int index=0;
     for(int i=0;i<n;i++)
     {
         temp[index++] = rot.substr(i,n);
     }

      for(int i=0;i<n;i++)
     {
         cout << temp[i] << endl;
     }


   }

// Main function
int main()
{
   string str = "abc";
   solve(str);
    return 0;
}

-----------------------------------------string rotation another method------------------------------------------------------------------


   void solve(string str) {
        // code here
     string str1;string str2;

     int n =str.length();

     string temp[n];int index=0;
     for(int i=0;i<n-1;i++)
     {

      str1= str.substr(i+1,n-i-1);
      str2= str.substr(0,i+1);
      temp[index++]=str1.append(str2);

     }
     cout<< "original string : " << str <<endl;

      for(int i=0;i<n;i++)
     {
         cout << temp[i] << endl;
     }


   }

// Main function
int main()
{
   string str = "abc";
   solve(str);
    return 0;
}

-------------------------------------left and right rotation by 2-----------------------------------------------------
 void solve(string str,int d) {
        // code here
     string rot = str+str;
     int n=str.length();
     string str1 = rot.substr((n-d),n);
     string str2 = rot.substr(d,n);

    cout<< "right rotation : " << str1 <<endl;
    cout<< "left rotation : " << str2<<endl;




   }

// Main function
int main()
{
   string str = "qwertyu";
   solve(str,2);
    return 0;
}
--------------------------------------------------number of rotations------------------------------------------------------
-------------------------

void solve(string str) {
        // code here
     string rot = str+str;
     int n=str.length();
     string temp="";int count1=0;
    for(int i=1;i<=n;i++)
    {
        temp = rot.substr(i,n);

        if(str==temp)
        {

            count1=i;
            break;
        }

   }
   cout<<"number of rotations : " << count1;

   }

// Main function
int main()
{
   string str = "aaaa";
   solve(str);
    return 0;
}
---------------------------------------------------------reverse equation----------------------------------------
  stack<char> st;string rev2="";
        int j; string rev ="";string t="";
    for(int i=0;str[i]!='\0';i++)
    {
     st.push(str[i]);

    }
    while(!st.empty())
    {

        if((st.top()!='*') || (st.top()!='/') ||(st.top()!='-') ||(st.top()!='+'))
        {

            rev+=st.top();
            st.pop();
                      cout<<"102 : debug" << endl;

        }
        else if ((st.top()=='*' || st.top()=='/' ||st.top()=='-' ||st.top()=='+')){
            cout<<"105 : debug" << endl;

            //rev2 = reversing(rev);
              cout<<"106 : debug" << rev2 << endl;
            t= st.top();
            st.pop();
            //rev2+=t;

        }
    }

    cout<<"string is :" << rev << endl;

------------------------------------------arrange positive and negative number on 2 sides of array------------------
-------------------------------------------


 void solve(int arr[],int length)
  {

      vector<int>P;vector<int>N;

      for(int i=0;i<length;i++)
      {

          if(arr[i] < 0)
          {

              N.push_back(arr[i]);
          }
          else{
             P.push_back(arr[i]);
          }
      }

          int m = P.size();
          int n = N.size();
          int k=0;
          int i=0;
          while(i<m)
          {
              arr[k++]=P[i++];
          }
          int j=0;
           while(j<n)
          {
              arr[k++]=N[j++];
          }

          for(int v=0;v<length;v++)
          {
              cout << arr[v];
          }




  }

// Main function
int main()
{
   int arr[] = {-1,2,-3,4,-5,6,7};
   int n = sizeof(arr)/sizeof(arr[0]);
   solve(arr,n);
    return 0;
}


-------------------------------------------finding missing number--------------------------------------------------------------

 void solve(int arr[],int length)
  {
    int m=10;
     unordered_set<int>s;int min1=INT_MAX;
     for(int i=0;i<length;i++)
     {
         s.insert(arr[i]);
     }
     int count1=0;

     for(int i=0;i<m;i++)
     {

         if(s.find(i) == s.end())
         {
             count1++;
             if(count1==2)
             {
                min1=i;

             }
         }
     }

     cout<<"2nd missing min is : " <<min1<<endl;



  }

// Main function
int main()
{
   int arr[] = {0,1,2,6,9};
   int n = sizeof(arr)/sizeof(arr[0]);
   solve(arr,n);
    return 0;
}

-------------------------------sort on 0s and 1s-------------------------------------------

 void solve(int arr[],int n)
  {  int j=0;
    for(int i=0;i<n;i++)
    {
        if(arr[i]!=1)
        {
        swap(arr[j],arr[i]);
          j++;
          }
    }

    for(int i=0;i<n;i++)
    {
        cout << arr[i] << " ";
    }


  }

// Main function
int main()
{
   int arr[] = {0,1,1,0,1,1,0};
   int n = sizeof(arr)/sizeof(arr[0]);
   solve(arr,n);
    return 0;
}


----------------------------------------alternate positive and  negative numbers in array---------------------------------------------------------


 void solve(int arr[],int length)
  {

      vector<int>P;vector<int>N;

      for(int i=0;i<length;i++)
      {

          if(arr[i] < 0)
          {

              N.push_back(arr[i]);
          }
          else{
             P.push_back(arr[i]);
          }
      }

          int m = P.size();
          int n = N.size();
          int k=0;
          int i=0;
          while(i<n)
          {
              arr[k++]=N[i++];
          }
          int j=0;int t=k;
           while(j<m)
          {
              arr[k++]=P[j++];
          }

          int pos=t;
          int neg=0;

          while(pos<length && pos>neg && arr[neg]<0 )
          {
              swap(arr[pos],arr[neg]);
              pos++;neg+=2;
          }

          for(int v=0;v<length;v++)
          {
              cout << arr[v] << " ";
          }




  }

// Main function
int main()
{
   int arr[] = {-1,2,-3,4,-5,6,7};
   int n = sizeof(arr)/sizeof(arr[0]);
   solve(arr,n);
    return 0;
}
-------------------------------------------replace word with new word----------------------------------------------------------------

#include <bits/stdc++.h>
using namespace std;

const int MAX_CHAR = 26;

void replacetest(string str,string replace1,string newone)
{
    int n=str.length();string temp="";string result="";

    for(int i=0;i<n;i++)
    {
        if(str[i] != ' ')
        {
            temp+=str[i];
           // cout<<"debug: " <<temp <<endl;
        }

       else
        {
            if(temp == replace1)
            {
            result+=(" "+newone);
            temp="";
            //continue;

            }
            else{
                result+=(" "+temp);
                temp="";
            }

        }

    }
  /*  int i=0;

    while(i<n)
    {

        if(str[i] != ' ')
        {
            temp+=str[i];
            //cout<<"debug: " <<temp <<endl;
            i++;
        }

       else
        {
            if(temp == replace1)
            {
            result.append(" "+newone);
            temp="";
            i++;

            }
            else if(i<n){
                result.append(" "+temp);
                temp="";
                i++;
            }
            //cout<< "i is: "<<i;

        }

    }*/

    //adding the last one
    result+=(" "+temp);

    cout<<"result is: " << result<<endl;

}

// Driver's Code
int main()
{
	string str="Mita or Nina";
	string replace1="or";
	string newone="and";
	replacetest(str,replace1,newone);
	return 0;
}


///////////////


 // CPP program to find the maximum segment
// value after putting k breaks.
// CPP Program to find all the common characters
// in n strings
#include <bits/stdc++.h>
using namespace std;

const int MAX_CHAR = 26;

void replacetest(string str,string replace1,string newone)
{
    int n=str.length();string temp="";string result="";

    for(int i=0;i<n;i++)
    {
        if(str[i] != ' ')
        {
            temp+=str[i];
           // cout<<"debug: " <<temp <<endl;
        }

       else
        {
            if(temp == replace1)
            {
            result+=(" "+newone);
            temp="";
            //continue;

            }
            else{
                result+=(" "+temp);
                temp="";
            }

        }

    }
  /*  int i=0;

    while(i<n)
    {

        if(str[i] != ' ')
        {
            temp+=str[i];
            //cout<<"debug: " <<temp <<endl;
            i++;
        }

       else
        {
            if(temp == replace1)
            {
            result.append(" "+newone);
            temp="";
            i++;

            }
            else if(i<n){
                result.append(" "+temp);
                temp="";
                i++;
            }
            //cout<< "i is: "<<i;

        }

    }*/

    //adding the last one
    result+=(" "+temp);

    cout<<"result is: " << result<<endl;

}

// Driver's Code
int main()
{
	string str="Mita or Nina";
	string replace1="or";
	string newone="and";
	replacetest(str,replace1,newone);
	return 0;
}
------------------------------------------------------------------------------------------------------------

// C++ program to find the maximum
// possible sum of a window in one
// array such that elements in same
// window of other array are unique.
#include <bits/stdc++.h>
using namespace std;

// Function to return maximum sum of window
// in B[] according to given constraints.
int returnMaxSum(int A[], int B[], int n)
{
	// Map is used to store elements
	// and their counts.
	unordered_map<int,int>mp;int sum=0;int max1=INT_MIN;bool flag=0;
	for(int i=0;i<n;i++)
    {
        if(mp.find(A[i])==mp.end())
        {
            sum+=B[i];
        }else{
            flag=true;
        }


        if((max1<sum) && (flag==false))
        {
            max1=sum;
        }


        mp[A[i]]++;

    }

	return max1;
}

// Driver code
int main()
{
	int A[] = { 0, 1, 2, 3, 0, 1, 4 };
	int B[] = { 9, 8, 1, 2, 3, 4, 5 };
	int n = sizeof(A)/sizeof(A[0]);
	cout << returnMaxSum(A, B, n);
	return 0;
}
-----------------------------------------rearrange odd even in alternate positions-----------------------------------------------------------
---------------

// C++ program to find the maximum
// possible sum of a window in one
// array such that elements in same
// window of other array are unique.
#include <bits/stdc++.h>
using namespace std;

// Function to return maximum sum of window
// in B[] according to given constraints.
void rearrange(int A[],int n)
{

       vector<int>even;vector<int>odd;

       for(int i=0;i<n;i++)
       {

           if(A[i]%2 == 0)
           {
               even.push_back(A[i]);
           }
           else{
            odd.push_back(A[i]);
           }
       }

       int temp[n];
       int i,j,k;i=0;j=0,k=0; bool flag=true;

      while(k<n)
       {
           if((flag) &&(i<even.size()))
           {

               temp[k++] = even[i++];
           }

           if((!flag) &&(j<odd.size()))
           {

               temp[k++] = odd[j++];
           }

           flag=!flag;
       }

       for(int v=0;v<n;v++)
       {
           cout<< temp[v] << " ";
       }
}

// Driver code
int main()
{
	int A[] = {4,6,8,1,3,5};
	int n =sizeof(A)/sizeof(A[0]);
	rearrange(A,n);
	return 0;
}
---------------------------------bc and a---------

// C++ program to find the maximum
// possible sum of a window in one
// array such that elements in same
// window of other array are unique.
#include <bits/stdc++.h>
using namespace std;

// Function to return maximum sum of window
// in B[] according to given constraints.
void rearrange(string str)
{
int n = str.length();
int i;string res="";int j=0;

 for(i=0;i<n;i++)
  {

      while((str[i]=='a') && (str[i+1]=='c'))
      {
       j= i++;
      }
      res+=str[j];


  }

  if(i==n)
  {
      str[i]='\0';
  }
 // str[j]='\0';
 cout<<"debug "<<str<<" "<<endl;
 /*  int m =res.length();i=0;string a="";
   for(i=0;i<m;i++)
  {

      if((res[i] =='b'))
      {

       continue;
      }
      else{
        a+=res[i];
      }
  }



  cout<<"string is "<<a<<" ";*/
}

// Driver code
int main()
{
	int A[] = {4,6,8,1,3,5};
	int n =sizeof(A)/sizeof(A[0]);
	string str="acbac";
	rearrange(str);
	return 0;
}


-----------------------------check code------------------------------

// C++ program to find the maximum
// possible sum of a window in one
// array such that elements in same
// window of other array are unique.
#include <bits/stdc++.h>
using namespace std;

// Function to return maximum sum of window
// in B[] according to given constraints.
void rearrange(int N,int p,int k)
{
   int num=0;int counter=1;
   while(counter<=k)
   {

       num|=(N&(1<<(p-1)));
        p++;
        counter++;
   }
         num >>=1;
   cout << num <<endl;
}

// Driver code
int main()
{
	//int A[] = {4,6,8,1,3,5};
	//int n =sizeof(A)/sizeof(A[0]);
	//string str="acbac";
	int N=171;int k=5;int p=2;
	rearrange(N,p,k);
	return 0;
}
------------------------------------------https://www.metacareers.com/profile/coding_puzzles/?puzzle=228269118726856------uniform integers-------------------------------------------------------------------

#include <bits/stdc++.h>
using namespace std;
// Write any include statements here

int getUniformIntegerCountInInterval(long long A, long long B) {
  // Write your code here
  if(A == B)
  {
    return 1;
  }
  long long i;int count=0;int digit=0;long long num;string s="";char ch;int l;int j;int c=0;
  for(i=A;i<=B;i++)
  {    num=i;
       digit=num%10;
       s=to_string(i);
       ch=digit+'0';
       l=s.length();
     
     /*    for(j=0;j<l;j++)
         {
           if(ch !=s[j])
           {
             break;
           }
         }
         
         if(j==l)
         {
           count++;
         }*/
       j=0;
       while(j<l)
       {
         if(ch !=s[j])
           {
           break;
           }
         j++;
       }
   
      if(j==l)
         {
           count++;
         }
     
         
  }
  
  
  
  return count;
}

///SET all bits within range

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
    int setAllRangeBits(int N , int L , int R) {
        // code here
        
        while(L<=R)
        {
            N |= (1<<(L-1));
            L++;
        }
        
        return N;
    }
};

// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N,L,R;
        
        cin>>N>>L>>R;

        Solution ob;
        cout << ob.setAllRangeBits(N,L,R) << endl;
    }
    return 0;
}  // } Driver Code Ends
---------------------------------------------------------------------------------------

// { Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++
class Solution {
  public:
    long long int convertEvenBitToZero(long long int n) {
        // code here
        for(int i=1;i<=32;i+=2)
        {
            n &= ~(1<<(i-1));
        }
        return n;
    }
};

// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        long long int n;
        cin >> n;
        Solution ob;
        cout << ob.convertEvenBitToZero(n) << endl;
    }
    return 0;
}
  // } Driver Code Ends

----------------------------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
using namespace std;


int subsort(vector<int> arr)
{

   // vector<int> arr={1,2,3,4,5,8,6,7,9,10,11};

    vector<int> temp;
    int N = arr.size();

    int count1=0;int count2=0; int startIndex,endIndex;
    startIndex=0;endIndex=0;
    for(int i=0;i<=N;i++)
    {
      if((arr[i+1]-arr[i]) != 1)
      {

          count1++;
      }

      if(count1==1)
      {
          startIndex = i+1;
      }

    }

    for(int j= N-1;j>=0;j--)
     {


      if((arr[j] - arr[j-1]) != 1)
      {
        //  cout << arr[N-i] <<endl;
         // cout << arr[N-i-1] <<endl;

          count2++;
      }

      if(count2==1)
      {
          endIndex = j;
      }

    }


    temp.push_back(startIndex);
    temp.push_back(endIndex);

    for(int i=0;i <temp.size();i++)
    {
        cout << temp[i] <<endl;
    }
    //return temp;
}

int main()
{
       vector<int> arr={1,2,3,4,5,8,6,7,9,10,11};

       subsort(arr);


}

/*
int main()
{

     int arr[] = {1,3,5};
     int i,j;
     int N= sizeof(arr)/sizeof(arr[0]);int count1,digit,cal;int sum=0;

     for(i=0;i<N;i++)
     {   cal=1,count1=0;

         for(j=0;j<N;j++)
         {
             cal = arr[i] ^ arr[j];
             while(cal!=0)
             {
                 digit=cal%2;
                 if(digit == 1)
                 {
                     count1++;
                 }
                 cal = cal/2;
             }
         }

         sum+=count1;


     }




 cout<<"sum: "<<sum<<endl;
}

*/



#include <iostream>
#include <thread>
/*#include <chrono>
#include <algorithm>
using namespace std;
using namespace std::chrono;
typedef long long int  ull;

void fun(int x){
  while(x-- >0)
  {

      cout<< x <<endl;
  }
}

int main()
{

    std::thread t1(fun,11);
    t1.join();
    return 0;
}





*/
/*
void findEven(ull start, ull end, ull* EvenSum) {
	for (ull i = start; i <= end; ++i){
		if (!(i & 1)){
			*(EvenSum) += i;
		}
	}
}

void findOdd(ull start, ull end, ull* OddSum) {
	for (ull i = start; i <= end; ++i){
		if (i & 1){
			(*OddSum) += i;
		}
	}
}

int main() {

	ull start = 0, end = 1900000000;

	ull OddSum = 0;
	ull EvenSum = 0;

    auto startTime = high_resolution_clock::now();

	// // WITH THREAD
    std::thread t1(findEven, start, end, &(EvenSum));
    std::thread t2(findOdd, start, end, &(OddSum));

	t1.join();
	t2.join();

	// // WITHOUT THREAD
	// findEven(start,end, &EvenSum);
	// findOdd(start, end, &OddSum);
    auto stopTime = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stopTime - startTime);

	cout << "OddSum : " << OddSum << endl;
	cout << "EvenSum : " << EvenSum << endl;

	cout << "Sec: " << duration.count()/1000000 << endl;

	return 0;
}
*/
-------------------------------------1 2 3 4 5 6
----------------------------------------------------------------------------------------
i.MX 8 Family Applications Processor | Arm Cortex-A53/A72/M4
for Minimum CPU Interaction ... AM335x Sitara Processors Scalable ARM Cortex-A8-based core from 300 MHz up to 1 GHz, 3D graphics option for enhanced user ...
12 MHz
The original 8051 core ran at 12 clock cycles per machine cycle, with most instructions executing in one or two machine cycles. With a 12 MHz clock frequency, the 8051 could thus execute 1 million one-cycle instructions per second or 500,000 two-cycle instructions per second.
General Description
PSoC® 4 is a scalable and reconfigurable platform architecture for a family of mixed-signal programmable embedded system
controllers with an Arm® Cortex™-M0 CPU. It combines programmable and reconfigurable analog and digital blocks with flexible
automatic routing. The PSoC 4200 product family, based on this platform, is a combination of a microcontroller with digital programmable logic, high-performance analog-to-digital conversion, opamps with Comparator mode, and standard communication and timing
peripherals. The PSoC 4200 products will be fully upward compatible with members of the PSoC 4 platform for new applications and
design needs. The programmable analog and digital sub-systems allow flexibility and in-field tuning of the design.
Features
32-bit MCU Sub-system
■ 48-MHz Arm Cortex-M0 CPU with single cycle multiply
■ Up to 32 kB of flash with Read Accelerator
■ Up to 4 kB of SRAM
